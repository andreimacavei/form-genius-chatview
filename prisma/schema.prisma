generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model profiles {
  id         String    @id(map: "users_pkey") @db.Uuid
  email      String    @unique(map: "profiles_email_unique")
  name       String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  surveys    surveys[]
}

model responses {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  survey_id  String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  email      String?
  answers    Json      @default("[]")
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  surveys    surveys   @relation(fields: [survey_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "responses_survey_id_surveys_id_fk")
}

model surveys {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  description      String?
  status           survey_status? @default(draft)
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  user_id          String         @db.Uuid
  image_url        String?
  slug             String         @unique(map: "surveys_slug_unique")
  survey_questions Json           @default("[]")
  settings         Json           @default("{\"defaults\": {\"collectEmailByDefault\": true, \"makeQuestionsRequiredByDefault\": false}, \"responses\": {\"collectEmail\": true, \"limitToOneResponse\": false, \"allowResponseEditing\": false}, \"presentation\": {\"viewType\": \"stacked\", \"showProgressBar\": true, \"confirmationMessage\": \"Thank you for completing the survey\", \"shuffleQuestionOrder\": false}}")
  sections         Json           @default("[]")
  responses        responses[]
  profiles         profiles       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "surveys_user_id_profiles_id_fk")
}

enum survey_status {
  draft
  published
  closed
}
